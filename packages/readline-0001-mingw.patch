From df3a17dbb430497434350c6eb13b962839b4b338 Mon Sep 17 00:00:00 2001
From: shinchiro <shinchiro@users.noreply.github.com>
Date: Thu, 2 Feb 2017 17:18:27 +0800
Subject: [PATCH] Mingw

---
 colors.c  |  19 +++++--
 input.c   | 182 ++++++++++++++++++++++++++++++++------------------------------
 signals.c |   8 +++
 3 files changed, 119 insertions(+), 90 deletions(-)

diff --git a/colors.c b/colors.c
index 89d9035..729b440 100644
--- a/colors.c
+++ b/colors.c
@@ -37,6 +37,10 @@
 #include "posixstat.h" // stat related macros (S_ISREG, ...)
 #include <fcntl.h> // S_ISUID
 
+#ifndef S_ISDIR
+#define	S_ISDIR(m)	(((m) & S_IFMT) == S_IFDIR)
+#endif
+
 // strlen()
 #if defined (HAVE_STRING_H)
 #  include <string.h>
@@ -151,12 +155,17 @@ _rl_print_color_indicator (char *f)
       if (S_ISREG (mode))
         {
           colored_filetype = C_FILE;
-
+#ifdef S_ISUID
           if ((mode & S_ISUID) != 0 && is_colored (C_SETUID))
             colored_filetype = C_SETUID;
-          else if ((mode & S_ISGID) != 0 && is_colored (C_SETGID))
+		else
+#endif
+#ifdef S_ISGID
+          if ((mode & S_ISGID) != 0 && is_colored (C_SETGID))
             colored_filetype = C_SETGID;
-          else if (is_colored (C_CAP) && 0) //f->has_capability)
+          else
+#endif
+		  if (is_colored (C_CAP) && 0) //f->has_capability)
             colored_filetype = C_CAP;
           else if ((mode & S_IXUGO) != 0 && is_colored (C_EXEC))
             colored_filetype = C_EXEC;
@@ -180,15 +189,19 @@ _rl_print_color_indicator (char *f)
             colored_filetype = C_STICKY;
 #endif
         }
+	#ifdef S_ISLNK
       else if (S_ISLNK (mode))
         colored_filetype = ((linkok == 0
                  && (!strncmp (_rl_color_indicator[C_LINK].string, "target", 6)
                      || _rl_color_indicator[C_ORPHAN].string))
                 ? C_ORPHAN : C_LINK);
+	#endif
       else if (S_ISFIFO (mode))
         colored_filetype = C_FIFO;
+	#ifdef S_ISSOCK
       else if (S_ISSOCK (mode))
         colored_filetype = C_SOCK;
+#endif
       else if (S_ISBLK (mode))
         colored_filetype = C_BLK;
       else if (S_ISCHR (mode))
diff --git a/input.c b/input.c
index 117dfe8..36353f5 100644
--- a/input.c
+++ b/input.c
@@ -3,7 +3,7 @@
 /* Copyright (C) 1994-2013 Free Software Foundation, Inc.
 
    This file is part of the GNU Readline Library (Readline), a library
-   for reading lines of text with interactive input and history editing.      
+   for reading lines of text with interactive input and history editing.
 
    Readline is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -162,7 +162,7 @@ _rl_unget_char (key)
     {
       pop_index--;
       if (pop_index < 0)
-	pop_index = ibuffer_len;
+  pop_index = ibuffer_len;
       ibuffer[pop_index] = key;
       return (1);
     }
@@ -216,12 +216,12 @@ rl_gather_tyi ()
 
       fcntl (tty, F_SETFL, tem);
       if (chars_avail == -1 && errno == EAGAIN)
-	return 0;
+  return 0;
       if (chars_avail == 0)	/* EOF */
-	{
-	  rl_stuff_char (EOF);
-	  return (0);
-	}
+  {
+    rl_stuff_char (EOF);
+    return (0);
+  }
     }
 #endif /* O_NDELAY */
 
@@ -252,19 +252,19 @@ rl_gather_tyi ()
   if (result != -1)
     {
       while (chars_avail--)
-	{
-	  RL_CHECK_SIGNALS ();
-	  k = (*rl_getc_function) (rl_instream);
-	  if (rl_stuff_char (k) == 0)
-	    break;			/* some problem; no more room */
-	  if (k == NEWLINE || k == RETURN)
-	    break;
-	}
+  {
+    RL_CHECK_SIGNALS ();
+    k = (*rl_getc_function) (rl_instream);
+    if (rl_stuff_char (k) == 0)
+      break;			/* some problem; no more room */
+    if (k == NEWLINE || k == RETURN)
+      break;
+  }
     }
   else
     {
       if (chars_avail)
-	rl_stuff_char (input);
+  rl_stuff_char (input);
     }
 
   return 1;
@@ -344,8 +344,8 @@ _rl_input_queued (t)
 
 void
 _rl_insert_typein (c)
-     int c;     
-{    	
+     int c;
+{
   int key, t, i;
   char *string;
 
@@ -354,8 +354,8 @@ _rl_insert_typein (c)
   string[i++] = (char) c;
 
   while ((t = rl_get_char (&key)) &&
-	 _rl_keymap[key].type == ISFUNC &&
-	 _rl_keymap[key].function == rl_insert)
+   _rl_keymap[key].type == ISFUNC &&
+   _rl_keymap[key].function == rl_insert)
     string[i++] = key;
 
   if (t)
@@ -432,37 +432,37 @@ rl_read_key ()
     {
       /* If input is coming from a macro, then use that. */
       if (c = _rl_next_macro_key ())
-	return (c);
+  return (c);
 
       /* If the user has an event function, then call it periodically. */
       if (rl_event_hook)
-	{
-	  while (rl_event_hook)
-	    {
-	      if (rl_get_char (&c) != 0)
-		break;
-		
-	      if ((r = rl_gather_tyi ()) < 0)	/* XXX - EIO */
-		{
-		  rl_done = 1;
-		  return ('\n');
-		}
-	      else if (r > 0)			/* read something */
-		continue;
-
-	      RL_CHECK_SIGNALS ();
-	      if (rl_done)		/* XXX - experimental */
-		return ('\n');
-	      (*rl_event_hook) ();
-	    }
-	}
+  {
+    while (rl_event_hook)
+      {
+        if (rl_get_char (&c) != 0)
+    break;
+
+        if ((r = rl_gather_tyi ()) < 0)	/* XXX - EIO */
+    {
+      rl_done = 1;
+      return ('\n');
+    }
+        else if (r > 0)			/* read something */
+    continue;
+
+        RL_CHECK_SIGNALS ();
+        if (rl_done)		/* XXX - experimental */
+    return ('\n');
+        (*rl_event_hook) ();
+      }
+  }
       else
-	{
-	  if (rl_get_char (&c) == 0)
-	    c = (*rl_getc_function) (rl_instream);
+  {
+    if (rl_get_char (&c) == 0)
+      c = (*rl_getc_function) (rl_instream);
 /* fprintf(stderr, "rl_read_key: calling RL_CHECK_SIGNALS: _rl_caught_signal = %d", _rl_caught_signal); */
-	  RL_CHECK_SIGNALS ();
-	}
+    RL_CHECK_SIGNALS ();
+  }
     }
 
   return (c);
@@ -483,21 +483,21 @@ rl_getc (stream)
 
 #if defined (__MINGW32__)
       if (isatty (fileno (stream)))
-	return (getch ());
+  return (getch ());
 #endif
       result = read (fileno (stream), &c, sizeof (unsigned char));
 
       if (result == sizeof (unsigned char))
-	return (c);
+  return (c);
 
       /* If zero characters are returned, then the file that we are
-	 reading from is empty!  Return EOF in that case. */
+   reading from is empty!  Return EOF in that case. */
       if (result == 0)
-	return (EOF);
+  return (EOF);
 
 #if defined (__BEOS__)
       if (errno == EINTR)
-	continue;
+  continue;
 #endif
 
 #if defined (EWOULDBLOCK)
@@ -513,11 +513,11 @@ rl_getc (stream)
 #endif
 
       if (errno == X_EWOULDBLOCK || errno == X_EAGAIN)
-	{
-	  if (sh_unset_nodelay_mode (fileno (stream)) < 0)
-	    return (EOF);
-	  continue;
-	}
+  {
+    if (sh_unset_nodelay_mode (fileno (stream)) < 0)
+      return (EOF);
+    continue;
+  }
 
 #undef X_EWOULDBLOCK
 #undef X_EAGAIN
@@ -525,20 +525,28 @@ rl_getc (stream)
 /* fprintf(stderr, "rl_getc: result = %d errno = %d\n", result, errno); */
 
       /* If the error that we received was EINTR, then try again,
-	 this is simply an interrupted system call to read ().  We allow
-	 the read to be interrupted if we caught SIGHUP or SIGTERM (but
-	 not SIGINT; let the signal handler deal with that), but if the
-	 application sets an event hook, call it for other signals.
-	 Otherwise (not EINTR), some error occurred, also signifying EOF. */
+   this is simply an interrupted system call to read ().  We allow
+   the read to be interrupted if we caught SIGHUP or SIGTERM (but
+   not SIGINT; let the signal handler deal with that), but if the
+   application sets an event hook, call it for other signals.
+   Otherwise (not EINTR), some error occurred, also signifying EOF. */
       if (errno != EINTR)
-	return (RL_ISSTATE (RL_STATE_READCMD) ? READERR : EOF);
-      else if (_rl_caught_signal == SIGHUP || _rl_caught_signal == SIGTERM)
-	return (RL_ISSTATE (RL_STATE_READCMD) ? READERR : EOF);
-      else if (_rl_caught_signal == SIGINT || _rl_caught_signal == SIGQUIT)
+  return (RL_ISSTATE (RL_STATE_READCMD) ? READERR : EOF);
+      else if (
+    #ifdef SIGHUP
+    _rl_caught_signal == SIGHUP ||
+    #endif
+    _rl_caught_signal == SIGTERM)
+  return (RL_ISSTATE (RL_STATE_READCMD) ? READERR : EOF);
+      else if (_rl_caught_signal == SIGINT
+    #ifdef SIGQUIT
+    || _rl_caught_signal == SIGQUIT
+    #endif
+    )
         RL_CHECK_SIGNALS ();
 
       if (rl_signal_event_hook)
-	(*rl_signal_event_hook) ();
+  (*rl_signal_event_hook) ();
     }
 }
 
@@ -557,7 +565,7 @@ _rl_read_mbchar (mbchar, size)
   memset(&ps, 0, sizeof (mbstate_t));
   memset(&ps_back, 0, sizeof (mbstate_t));
 
-  mb_len = 0;  
+  mb_len = 0;
   while (mb_len < size)
     {
       RL_SETSTATE(RL_STATE_MOREINPUT);
@@ -565,27 +573,27 @@ _rl_read_mbchar (mbchar, size)
       RL_UNSETSTATE(RL_STATE_MOREINPUT);
 
       if (c < 0)
-	break;
+  break;
 
       mbchar[mb_len++] = c;
 
       mbchar_bytes_length = mbrtowc (&wc, mbchar, mb_len, &ps);
       if (mbchar_bytes_length == (size_t)(-1))
-	break;		/* invalid byte sequence for the current locale */
+  break;		/* invalid byte sequence for the current locale */
       else if (mbchar_bytes_length == (size_t)(-2))
-	{
-	  /* shorted bytes */
-	  ps = ps_back;
-	  continue;
-	} 
+  {
+    /* shorted bytes */
+    ps = ps_back;
+    continue;
+  }
       else if (mbchar_bytes_length == 0)
-	{
-	  mbchar[0] = '\0';	/* null wide character */
-	  mb_len = 1;
-	  break;
-	}
+  {
+    mbchar[0] = '\0';	/* null wide character */
+    mb_len = 1;
+    break;
+  }
       else if (mbchar_bytes_length > (size_t)(0))
-	break;
+  break;
     }
 
   return mb_len;
@@ -611,14 +619,14 @@ _rl_read_mbstring (first, mb, mlen)
       mb[i] = (char)c;
       memset (&ps, 0, sizeof (mbstate_t));
       if (_rl_get_char_len (mb, &ps) == -2)
-	{
-	  /* Read more for multibyte character */
-	  RL_SETSTATE (RL_STATE_MOREINPUT);
-	  c = rl_read_key ();
-	  RL_UNSETSTATE (RL_STATE_MOREINPUT);
-	}
+  {
+    /* Read more for multibyte character */
+    RL_SETSTATE (RL_STATE_MOREINPUT);
+    c = rl_read_key ();
+    RL_UNSETSTATE (RL_STATE_MOREINPUT);
+  }
       else
-	break;
+  break;
     }
   return c;
 }
diff --git a/signals.c b/signals.c
index 61f02f9..f2ceaf5 100644
--- a/signals.c
+++ b/signals.c
@@ -216,7 +216,9 @@ _rl_handle_signal (sig)
       /* FALLTHROUGH */
 
     case SIGTERM:
+#if defined (SIGHUP)
     case SIGHUP:
+#endif
 #if defined (SIGTSTP)
     case SIGTSTP:
     case SIGTTOU:
@@ -397,7 +399,9 @@ rl_set_signals ()
 
       sigaddset (&bset, SIGINT);
       sigaddset (&bset, SIGTERM);
+#ifdef SIGHUP
       sigaddset (&bset, SIGHUP);
+#endif
 #if defined (SIGQUIT)
       sigaddset (&bset, SIGQUIT);
 #endif
@@ -426,7 +430,9 @@ rl_set_signals ()
 
       rl_maybe_set_sighandler (SIGINT, rl_signal_handler, &old_int);
       rl_maybe_set_sighandler (SIGTERM, rl_signal_handler, &old_term);
+#ifdef SIGHUP
       rl_maybe_set_sighandler (SIGHUP, rl_signal_handler, &old_hup);
+#endif
 #if defined (SIGQUIT)
       rl_maybe_set_sighandler (SIGQUIT, rl_signal_handler, &old_quit);
 #endif
@@ -491,7 +497,9 @@ rl_clear_signals ()
 	 overhead */
       rl_maybe_restore_sighandler (SIGINT, &old_int);
       rl_maybe_restore_sighandler (SIGTERM, &old_term);
+#ifdef SIGHUP
       rl_maybe_restore_sighandler (SIGHUP, &old_hup);
+#endif
 #if defined (SIGQUIT)
       rl_maybe_restore_sighandler (SIGQUIT, &old_quit);
 #endif
-- 
2.10.2

