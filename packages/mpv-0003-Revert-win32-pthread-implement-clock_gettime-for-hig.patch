From 4d44c21b0dde3700fb3c34beb1e0c39916c9d333 Mon Sep 17 00:00:00 2001
From: rorgoroth <77244135+rorgoroth@users.noreply.github.com>
Date: Sat, 21 Oct 2023 12:48:16 +0100
Subject: [PATCH 3/4] Revert "win32/pthread: implement clock_gettime for
 high-res timer purposes"

This reverts commit 66c3110a856f11c1fc68044e6ef426991911aa25.
---
 osdep/win32/include/pthread.h |  8 +-------
 osdep/win32/pthread.c         | 32 ++++++++------------------------
 2 files changed, 9 insertions(+), 31 deletions(-)

diff --git a/osdep/win32/include/pthread.h b/osdep/win32/include/pthread.h
index 395115faa3..9551feb9c4 100644
--- a/osdep/win32/include/pthread.h
+++ b/osdep/win32/include/pthread.h
@@ -20,7 +20,7 @@
 
 #include <sys/types.h>
 
-#define _POSIX_TIMERS 200809L
+#define _POSIX_TIMERS 0
 
 // Note: all pthread functions are mangled to make static linking easier.
 #define pthread_once m_pthread_once
@@ -36,7 +36,6 @@
 #define pthread_detach m_pthread_detach
 #define pthread_create m_pthread_create
 #define pthread_set_name_np m_pthread_set_name_np
-#define clock_gettime m_clock_gettime
 
 #define pthread_once_t INIT_ONCE
 #define PTHREAD_ONCE_INIT INIT_ONCE_STATIC_INIT
@@ -79,11 +78,6 @@ int pthread_mutex_unlock(pthread_mutex_t *mutex);
 #define pthread_cond_broadcast(cond) WakeAllConditionVariable(cond)
 #define pthread_cond_signal(cond) WakeConditionVariable(cond)
 
-#define clockid_t int
-#define CLOCK_REALTIME 1
-
-int clock_gettime(clockid_t clockid, struct timespec *tp);
-
 int pthread_cond_timedwait(pthread_cond_t *restrict cond,
                            pthread_mutex_t *restrict mutex,
                            const struct timespec *restrict abstime);
diff --git a/osdep/win32/pthread.c b/osdep/win32/pthread.c
index 11a0c50476..d4884cf73f 100644
--- a/osdep/win32/pthread.c
+++ b/osdep/win32/pthread.c
@@ -85,23 +85,6 @@ int pthread_mutex_unlock(pthread_mutex_t *mutex)
     return 0;
 }
 
-int clock_gettime(clockid_t clockid, struct timespec *tp)
-{
-    if (clockid != CLOCK_REALTIME) {
-        errno = EINVAL;
-        return -1;
-    }
-    union {
-        FILETIME ft;
-        ULARGE_INTEGER i;
-    } r;
-    GetSystemTimePreciseAsFileTime(&r.ft);
-    r.i.QuadPart -= UINT64_C(116444736000000000); // MS epoch -> Unix epoch
-    tp->tv_sec = r.i.QuadPart / UINT64_C(10000000);
-    tp->tv_nsec = (r.i.QuadPart % UINT64_C(10000000)) * 100;
-    return 0;
-}
-
 static int cond_wait(pthread_cond_t *restrict cond,
                      pthread_mutex_t *restrict mutex,
                      DWORD ms)
@@ -121,15 +104,16 @@ int pthread_cond_timedwait(pthread_cond_t *restrict cond,
                            pthread_mutex_t *restrict mutex,
                            const struct timespec *restrict abstime)
 {
-    struct timespec ts;
-    clock_gettime(CLOCK_REALTIME, &ts);
+    // mpv uses mingw's gettimeofday() as time source too.
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
     DWORD timeout_ms = 0;
-    if (abstime->tv_sec >= INT64_MAX / 1000) { // overflow
+    if (abstime->tv_sec >= INT64_MAX / 10000) {
         timeout_ms = INFINITE;
-    } else if (abstime->tv_sec >= ts.tv_sec) {
-        int64_t msec = (abstime->tv_sec - ts.tv_sec) * INT64_C(1000) +
-            (abstime->tv_nsec - ts.tv_nsec) / INT64_C(10000000);
-        if (msec > ULONG_MAX) {
+    } else if (abstime->tv_sec >= tv.tv_sec) {
+        long long msec = (abstime->tv_sec - tv.tv_sec) * 1000LL +
+            abstime->tv_nsec / 1000LL / 1000LL - tv.tv_usec / 1000LL;
+        if (msec > INT_MAX) {
             timeout_ms = INFINITE;
         } else if (msec > 0) {
             timeout_ms = msec;
-- 
2.40.1

